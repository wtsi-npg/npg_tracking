#!/usr/bin/perl
 	
## inspied by svn+ssh://svn.internal.sanger.ac.uk/repos/svn/coreweb/webcode-09/trunk/utilities/restart, r 1030 by James Smith
	
use strict;
use warnings;
use Const::Fast qw(const);	
use English qw(-no_match_vars $PROGRAM_NAME $UID);
use File::Basename qw(dirname basename);
use Cwd qw(abs_path);
use Getopt::Long qw(GetOptions);
use POSIX qw(strftime);
use JSON;

const my $DEFAULT_PORT     => 8000;
const my $CONF_FILE        => 'webconf';
const my $HTTPD_CONF_FILE  => 'httpd_vm.conf';

my $wtsi_local  = dirname(abs_path($PROGRAM_NAME));	
my $path        = dirname($wtsi_local);	
my $script_name = basename($PROGRAM_NAME);
my $command     = $script_name eq 'start' ? 'restart' : $script_name;
my $httpd_conf  = join(q[/], $wtsi_local,$HTTPD_CONF_FILE);
my $conf        = join q[/], $wtsi_local, $CONF_FILE;

my $help = 0;	
GetOptions('help' => \$help,);
_docs() if $help;

my $top_level = dirname($path);
my $system    = basename($top_level);
my $flag      = $system =~ m{www-(\w+)\Z}mxs ? $1 : $system; ## Uses system name as flag....
	
printf {*STDERR} "\n Performing action '%s' on '%s' system '%s'\n\n", $command, $flag, $system;

my($name,$passwd,$uid,$gid,$quota,$comment,$gcos,$dir,$shell,$expire) = getpwuid $UID;

#$ENV{'NPG_TRACKING_SERVER_ROOT'}      = '/etc/apache2';
$ENV{'NPG_TRACKING_SERVER_FLAG'}      = $flag;
$ENV{'NPG_TRACKING_SERVER_PORT'}      = _parse_webconf();
$ENV{'NPG_TRACKING_SERVER_PATH'}      = $path;
$ENV{'NPG_TRACKING_SERVER_LOGS_DIR'}  = $top_level.'/apache/logs';
$ENV{'NPG_TRACKING_SERVER_MODS_DIR'}  = $top_level.'/apache/mods_enabled';
$ENV{'NPG_TRACKING_SERVER_GROUP'}     = getgrgid $gid;
$ENV{'NPG_TRACKING_SERVER_PERL5LIB'}  = $path.'/lib/perl5:'.$top_level.'/cpan/lib/perl5';

if ($command eq 'restart') {
  _create_apache_dirs();
}	

my $return = system '/usr/sbin/apache2ctl', '-f', $httpd_conf, '-k', $command;
if( $return ) {
  printf {*STDERR} " Returned result: %s\n\n", $return;
} else {
  printf {*STDERR} " Returned OK\n\n";
}
exit 0;
 	
sub _docs {
  printf {*STDERR} "\n\t$script_name - script to $command npg apache server on the vm\n";
  printf {*STDERR} "\tusers $httpd_conf as httpd conf file\n";
  printf {*STDERR} "\treads port from $conf or sets it to $DEFAULT_PORT\n\n";
  exit 0;
}

sub _parse_webconf {
  my $port = $DEFAULT_PORT;
  eval {
    local $/=undef;
    open my $fh, q[<],$conf;
    if ($fh) {
      my $h=from_json(<$fh>);
      if ($h && $h->{'port'}) {
        $port = $h->{'port'};
      }
    }
  };
  return $port;
}

sub _create_apache_dirs {
  my $logs = $ENV{'NPG_TRACKING_SERVER_LOGS_DIR'};
  if (!-e $logs) {
    printf {*STDERR} "Creating log directory $logs\n";
    `mkdir -p $logs`;
  }
  my $mods = $ENV{'NPG_TRACKING_SERVER_MODS_DIR'};
  if (!-e $mods) {
    printf {*STDERR} "Creating directory $mods\n";
    mkdir $mods;
  }
  my $apache_mods = '/etc/apache2/mods-available';
  my @links = qw/
alias.load	 authz_default.load    authz_user.load	mime.conf	  negotiation.load  setenvif.load
auth_basic.load  authz_groupfile.load  cgi.load		mime.load	  perl.load	    status.conf
authn_file.load  authz_host.load       env.load		negotiation.conf  setenvif.conf     status.load
                /;
  foreach my $link (@links) {
    my $slink = join q[/], $mods, $link;
    if (!-e $slink) {
      printf {*STDERR} "Enabling $link\n";
      my $target = join q[/], $apache_mods, $link;
      `ln -s $target $slink`;
    }
  }
  return;
}

	
