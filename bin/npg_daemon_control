#!/usr/bin/env perl

#########
# Author:        Marina Gourtovaia
# Created:       21 December 2009
# copied from: svn+ssh://svn.internal.sanger.ac.uk/repos/svn/new-pipeline-dev/instrument_handling/trunk/bin/remote_process_monitor
#

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Moose;
use Carp;
use English qw(-no_match_vars);
use Getopt::Long;
use Module::Pluggable::Object;
use File::Basename;
use Readonly;

Readonly::Scalar my $PRODUCTION_USER  => 'srpipe';
Readonly::Scalar my $DAEMON_NAMESPACE => 'npg_tracking::daemon';

my $opts = {};

my @classes = Module::Pluggable::Object->new(
                             require     => 0,
			     search_path => $DAEMON_NAMESPACE,
                                            )->plugins;

my @options = qw(help dry-run);
my @actions = qw(ping stop start);
foreach my $class (sort @classes) {
    foreach my $action (@actions) {
        my @temp = split m/:/msx, $class;
        push @options, (join q[_], $action, (pop @temp));
    }
}

if (scalar @options == 2) {
  croak q[Error: No plugins found. Probably, unable to find npg_tracking::daemon namespace.];
}

GetOptions($opts, @options, 'host=s@');

if($opts->{help} || !scalar keys %{$opts}) {
  help(@options, 'host');
  exit 0;
}

my ($request) = grep {/start_|ping_|stop_/msx} (keys %{$opts});
if (defined $request && $request) {

  if (!$ENV{USER} || ($ENV{USER} ne $PRODUCTION_USER)) {
    warn "\n************************************\n";
    warn   "*** YOUR ARE NOT PRODUCTION USER ***\n";
    warn   "************************************\n";
  }

  my @temp = split m/_/msx, $request;
  my $action = shift @temp;
  my $runner_package = $DAEMON_NAMESPACE . q[::] . join q[_], @temp;
  Class::MOP::load_class($runner_package);
  
  my $h = exists $opts->{'host'} ? {hosts => $opts->{'host'},} : {};
  my $runner = $runner_package->new($h);

  print "\n" or carp $OS_ERROR;
  foreach my $host (@{$runner->hosts}) {
    my $cmd = $runner->$action($host);
    my $human_readable_cmd = $cmd;
    $cmd =~ s/'/'"'"'/smxg;
    $cmd = qq[ssh -x $host 'bash -l -c \"$cmd\" ' 2>&1];
    print "$host " or carp $OS_ERROR;
    if (!$opts->{'dry-run'}) {
      open my $fh, q(-|), $cmd or croak $OS_ERROR;
      while (<$fh>) {
        print or croak $OS_ERROR;
      }
      close $fh or croak $OS_ERROR;
    } else {
      print "\nDRY RUN" or croak $OS_ERROR;
      print "\ncommand to be executed: $cmd" or carp $OS_ERROR;
    }
    print "\ncommand: $human_readable_cmd\n\n" or carp $OS_ERROR;
  }
}

exit 0;


sub help {
  my @opts = @_;
  print fileparse($PROGRAM_NAME) . qq[ options:\n];
  foreach my $op (@opts) {
      print qq[\t--$op\n] or carp $OS_ERROR;
  }
  print qq[\n] or carp $OS_ERROR;
  return;
}

1;

