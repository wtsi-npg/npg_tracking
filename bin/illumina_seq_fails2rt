#! /usr/bin/env perl
# Send an email to illumina-sequencing-failures@sanger.ac.uk to have a ticket automatically created in that RT queue.
# $Id: illumina_seq_fails2rt 16389 2013-01-07 11:04:50Z mg8 $
# Created By: david.jackson@sanger.ac.uk
# Last Maintained By: $Author: mg8 $
# Created On: 2010-03-01
# Last Changed On: $Date: 2013-01-07 11:04:50 +0000 (Mon, 07 Jan 2013) $
# $HeadURL: svn+ssh://svn.internal.sanger.ac.uk/repos/svn/new-pipeline-dev/npg-tracking/trunk/bin/illumina_seq_fails2rt $

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Getopt::Long;
use MIME::Lite;
use List::MoreUtils qw/uniq/;
use Carp;
use File::Temp qw/ tempdir /;
use DateTime;
use Readonly; Readonly::Scalar our $VERSION => do { my ($r) = q$LastChangedRevision: 16389 $ =~ /(\d+)/mxs; $r; };
use npg::api::run;
use npg_tracking::Schema;

Readonly::Scalar my $EMAIL_DOMAIN => q(@sanger.ac.uk);
Readonly::Scalar my $EMAIL_DELIM  => q(;);
Readonly::Scalar my $LOOK_BACK_DAYS  => 60;

my $sendmsg = 1;
my $id_run;
GetOptions (
            'id_run=i' => \$id_run,
            'sendmsg!' => \$sendmsg,
) or die 'arguments are: --id_run 4020 --no-sendmsg, both are optional';

my $program_name = __FILE__;
$program_name =~ s/^.*\///;

if ($id_run) {
  tickets4run($id_run);
  exit 0;
}

my $tickets = join q[/], tempdir(CLEANUP => 1) . 'tickets';
my $command = "wget -O $tickets 'https://rt.sanger.ac.uk/NoAuth/rss/dj3/ef14ddafcac13f2b/?Order=ASC|ASC|ASC|ASC&Query=Queue+%3D+%27illumina-sequencing-failures%27+AND+Created+%3E+%27-1year%27&OrderBy=id|||'";
if (system($command)) {
  croak "Executing '$command' failed";
}

my $done = {};
open my $fh, '<', $tickets;
while (my $line = <$fh>) {
  if ($line =~ /<title>Run/smx) {
    my ($id, $lanes) = $line =~/Run\ (\d+)\ --\ lanes*\ (\S+)\ --/smx;
    $done->{$id} = 1;
  }
}
close $fh;

my $s = npg_tracking::Schema->connect();
my $rs = $s->resultset("RunStatus")->search(
   {
      "run_status_dict.description" => "archival pending",
      "me.date" => {">", DateTime->now()->subtract(days => $LOOK_BACK_DAYS)},
   },
   {
      columns => ["id_run"],
      distinct => 1,
      join => "run_status_dict",
   }
);
my @runs=();
while (my $row = $rs->next) {
  push @runs, $row->id_run;
}
foreach my $id_run (sort @runs) {
  if ( !exists $done->{$id_run}) {
    tickets4run($id_run);
  }
}

exit 0;


sub tickets4run {
    my $id_run = shift;

    warn "Running $program_name for run $id_run\n";

    #improve: get runs with failed qc from the warehouse
    #$ perl -I/software/solexa/lib/perl5 -le 'use npg_warehouse::Schema; my $c=npg_warehouse::Schema->connect(); my $rs = $c->resultset("NpgInformation")->search({qc_complete => {">", "2012-08-20 00:00:01"}, manual_qc=>0,}); while (my $row=$rs->next) {print $row->id_run;}' 

    my $run = npg::api::run->new({id_run=>$id_run});
    ### organise lane data into hash keyed by study_id
    my %study2lane;
    my $with_illumina_controls = 0;
    foreach my $l ($run->lims->associated_child_lims) {
      next unless (defined $l->seq_qc_state && !$l->seq_qc_state);
      my @p = $l->study_names($with_illumina_controls);
      foreach my $p (@p) {
        push @{$study2lane{$p}},$l;
      }
    }

    my $emails2studies = _studies2emails(\%study2lane);

    ### message per a unique set of managers
    my @msg;

    foreach my $emails_set (keys %{$emails2studies}) {

      my $data = "set-id_run: $id_run\n";
      $data   .= 'set-instrument: '.$run->instrument->name.qq(\n);

      my @library_names = ();
      my @pos = ();
      my @study_names = ();
      foreach my $study_name (keys %{$emails2studies->{$emails_set}}) {
        my @limsa = @{$emails2studies->{$emails_set}->{$study_name}};
        push @study_names, $study_name;
        push @pos, map{$_->position} @limsa; 
        push @library_names, map{$_->library_name} @limsa;
      }

      @pos = uniq @pos;
      @pos = sort @pos;
      @library_names = uniq @library_names;
      @library_names = sort @library_names;
      @study_names = sort @study_names;
      my $studies = join(q[, ],map{q['].$_.q[']} @study_names);

      $data   .= "set-position: $_\n" foreach @pos;

      my @seqpm = split $EMAIL_DELIM, $emails_set;
      @seqpm = map{/@/?$_:$_.$EMAIL_DOMAIN} @seqpm;
      $data   .= "set-admincc: $_\n" foreach @seqpm;
      $data   .= 'set-owner: '.$seqpm[int(rand(@seqpm))].qq(\n) if @seqpm;
      $data   .= "\nLane".(@pos>1?q(s ):q( )).join(',',@pos)." of Illumina sequencing run $id_run, corresponding to librar".(@pos>1?q(ies ):q(y )).join(', ',map{q['].$_.q[']} @library_names)." have failed their NPG QC stage. Stud". (@study_names>1?q(ies ):q(y ))  .": $studies.\n";
      my $msg = MIME::Lite->new(
        From => ((getpwuid($<))[0]).$EMAIL_DOMAIN,
        To => "illumina-sequencing-failures$EMAIL_DOMAIN",
        Subject => "Run $id_run -- lane".(@pos>1?q(s ):q( )).join(',',@pos) . " -- $studies",
        Data => $data,
      );
      $msg->print() if not $sendmsg;
      push @msg, $msg;
    }

    if($sendmsg){
      $_->send foreach @msg;
    }
    return;
}

sub _studies2emails {
  my ($studies_hash) = @_;

  my $emails_hash = {};
  foreach my $study_name (keys %{$studies_hash}) {
    my $lims = $studies_hash->{$study_name}->[0];
    if ($lims->is_pool) {
      foreach my $l ($lims->associated_child_lims) {
        if ($l->study_name && $l->study_name eq $study_name) {
          $lims = $l;
          last;
        }
      }
    }
    my @emails_a =  uniq @{$lims->email_addresses_of_managers};
    if (@emails_a) {
      my $emails = join $EMAIL_DELIM, sort @emails_a;
      $emails_hash->{$emails}->{$study_name} = $studies_hash->{$study_name};
    } else {
      warn "No emails registered for study $study_name\n";
    }
  }
  return $emails_hash;
}

1;

