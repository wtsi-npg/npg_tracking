#!/usr/bin/env perl
#########
# Author:        jo3
# Maintainer:    $Author: mg8 $
# Created:       2010-05-27
# Last Modified: $Date: 2012-12-17 14:00:36 +0000 (Mon, 17 Dec 2012) $
# Id:            $Id: ga_II_checker 16335 2012-12-17 14:00:36Z mg8 $
# $HeadURL: svn+ssh://svn.internal.sanger.ac.uk/repos/svn/new-pipeline-dev/npg-tracking/trunk/bin/ga_II_checker $

package ga_II_checker;

use strict;
use warnings;
use Carp;
use English qw(-no_match_vars);

use Monitor::SRS::File;
use Monitor::SRS::FTP;
use Monitor::SRS::Local;
use Monitor::RunFolder;

use Readonly; Readonly::Scalar our $VERSION => do { my ($r) = q$Revision: 16335 $ =~ /(\d+)/smx; $r; };

local $ENV{dev} = ( defined $ENV{dev} ? $ENV{dev} : 'live' );

###
# Check the instrument. If ftp doesn't work, use the local staging area.
my $poll;

eval {
        $poll = Monitor::SRS::FTP->new_with_options();
        
        $poll->can_contact() or croak;
        1;
     }
     or do {
        $poll = Monitor::SRS::Local->new_with_options();
     };


croak $poll->label() . ' is not a GAII' if !$poll->is_gaii();


##
# Make a list of regular (not repeats, not tests) run folders.
my @run_paths;
eval {
        @run_paths = $poll->get_normal_run_paths();
        1;
    }
    or do {
        croak "Failed to get run directory list\n$EVAL_ERROR";
    };

croak 'Empty run directory list' if scalar @run_paths == 0;


##
# Loop through each of them and extract the information we need.
foreach my $address (@run_paths) {
    my $directory = Monitor::RunFolder->new( runfolder_path => $address );

    # We only care about runs that the db thinks are running or about to.
    next if $directory->current_run_status_description()
                !~ m/^ run[ ] (?: pending | in[ ]progress ) $/imsx;


    my $latest_cycle = $poll->get_latest_cycle($address);
    my $run_complete = $poll->is_run_completed($address);
    $directory->check_cycle_count( $latest_cycle, $run_complete );

    # If $poll isa Monitor::SRS::FTP we can't use long_info for this.
    my $run_is_rta;
    if ( ref $poll eq 'Monitor::SRS::FTP' ) {
        $run_is_rta = $poll->is_rta($address);
    }

    eval {
        $directory->read_long_info($run_is_rta);
        1;
    }
    or do {
        # If $poll is local then the recipe might just not be there yet.
        if ( $EVAL_ERROR =~ m/(Multiple|No) recipe file(?:s*) found/ms ) {
            carp "Single recipe file not found in $address";
            next;
        }
        croak $EVAL_ERROR;
    };
}


exit;

__END__


=head1 NAME

ga_II_checker - Monitor GA-II computers for run information.

=head1 VERSION

$Revision: 16335 $

=head1 SYNOPSIS

    C<perl ga_II_checker --ident (int|string)>

=head1 DESCRIPTION

This script takes the database id or database name of a GA_II as a required
argument and tries to update information in the database concerning the
instrument itself and concerning its current run.

The script tries first to connect via FTP to its controlling computer. If that
fails it look in the local staging area.

=head1 SUBROUTINES/METHODS

=head1 CONFIGURATION AND ENVIRONMENT

The script is intended to be called out from a crontab job, so take care when
editing it to use full paths to executables and with environmental variables.

It should also work as a stand-alone.

It uses the $dev environmental variable to decide which database to use, using
the value to find a matching section in the config.ini file.

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

John O'Brien, E<lt>jo3@sanger.ac.ukE<gt>

=head1 LICENCE AND COPYRIGHT

Copyright (C) 2010 GRL, by John O'Brien

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
